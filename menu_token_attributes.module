<?php

/**
 * Implements hook_theme().
 */
function menu_token_attributes_theme() {
  return array(
    'menu_token_attributes_uses_tokens' => array(),
  );
}

/**
 * Appends the "uses tokens" label to links on the admin menu links overview form.
 */
function theme_menu_token_attributes_uses_tokens() {
  drupal_add_css(drupal_get_path('module', 'menu_token_attributes') . '/menu_token_attributes.css');
  return ' <span class="uses-tokens">' . t('uses attribute tokens') . '</span>';
}

/**
 * Implements of hook_form_FORM_ID_alter().
 */
function menu_token_attributes_form_menu_edit_item_alter(&$form, &$form_state) {
  if ($form['module']['#value'] == 'menu') {
    $types = menu_token_attributes_get_plugin_types();
    $options = $form['options'];

    $form['options']['attributes']['menu_token_attributes_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use tokens in menu attributes.'),
      '#default_value' => isset($options['menu_token_attributes_enabled']['#value']),
      '#weight' => -3,
    );

    // Create new fieldset.
    $form['options']['attributes']['menu_token_attributes_replacement_patterns'] = array(
      '#type' => 'fieldset',
      '#title' => t('Replacement patterns'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -1,
      '#states' => array(
        'visible' => array(
          ':input[name="options[attributes][menu_token_attributes_enabled]"]' => array('checked' => TRUE),
        ),
      ),
    );

    $form['options']['attributes']['menu_token_attributes_replacement_patterns']['patterns'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array_keys($types),
    );

    // Add custom validation and submit functions.
    array_unshift($form['#validate'], 'menu_token_attributes_form_menu_edit_item_validate');
    array_unshift($form['#submit'], 'menu_token_attributes_form_menu_edit_item_submit');
  }
}

/**
 * Custom validation for form menu_edit_item.
 */
function menu_token_attributes_form_menu_edit_item_validate($form, &$form_state) {
  $values = $form_state['values'];

  // If token replacing is enabled and this is a custom menu item.
  if ($values['module'] == 'menu' && !empty($values['options']['menu_token_attributes_enabled'])) {

  }
}

/**
 * Custom submit for form menu_edit_item.
 */
function menu_token_attributes_form_menu_edit_item_submit($form, &$form_state) {
  $values = &$form_state['values'];

  // If token replacing is enabled and this is a custom menu item.
  if ($values['module'] == 'menu' && !empty($values['options']['attributes']['menu_token_attributes_enabled'])) {
    form_set_value( array('#parents' => array('options', 'menu_token_attributes_enabled')), $values['options']['attributes']['menu_token_attributes_enabled'], $form_state);
    unset($values['options']['attributes']['menu_token_attributes_enabled']);
  }
  else {
    foreach (array('menu_token_attributes_enabled') as $key) {
      unset($values['options'][$key]);
    }
  }

}

/**
 * Implements hook_menu_link_alter().
 */
function menu_token_attributes_menu_link_alter(&$item) {
  if (isset($item['options']['menu_token_attributes_enabled'])) {
    // Set 'alter' option to use hook_translated_menu_link_alter().
    $item['options']['alter'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function menu_token_attributes_form_menu_overview_form_alter(&$form, $form_state) {
  foreach ($form as &$item) {
    if (isset($item['mlid'], $item['#item']['options']) && isset($item['#item']['options']['menu_token_attributes_enabled'])) {
      $item['title']['#markup'] .= theme('menu_token_attributes_uses_tokens');
    }
  }
}

/**
 * Implements hook_translated_menu_link_alter().
 */
function menu_token_attributes_translated_menu_link_alter(&$item, $map) {
  global $menu_admin;

  // Check whether we should replace the path.
  if (empty($menu_admin) && isset($item['options']['menu_token_attributes_enabled'])) {
    $info = token_get_info();
    $data = array();

    // If item is generated by admin menu module, tokens should not be replaced
    // and indicator that tokens are used should be shown.
    $options['clear'] = TRUE;

    foreach ($item['localized_options']['attributes'] as $primary_key => $primary_attribute) {
      if (is_array($primary_attribute)) {
        foreach ($primary_attribute as $secondary_key => $secondary_value) {
          $value = token_replace($secondary_value, $data, $options);
          $item['localized_options']['attributes'][$primary_key][$secondary_key] = strtolower($value);
        }
      }
      else {
        $value = token_replace($primary_attribute, $data, $options);
        $item['localized_options']['attributes'][$primary_key] = strtolower($value);
      }
    }
  }
  return;
}

/**
 * Retrieves the handler of a menu token attributes plugin.
 *
 * @param $name
 *   The name of a plugin.
 *
 * @return
 *   A menu_token_handler object that represents the handler of the plugin
 *   defined by $name or FALSE if no plugin named $name exists.
 */
function menu_token_attributes_get_handler($name) {
  $handlers = &drupal_static(__FUNCTION__);

  if (!isset($handlers[$name])) {
    if ($plugin = menu_token_attributes_get_plugin($name)) {
      $handlers[$name] = new $plugin['class']($plugin);
    }
  }

  if (isset($handlers[$name])) {
    return $handlers[$name];
  }

  return FALSE;
}

/**
 * Retrieves a menu token attributes plugin.
 *
 * @param $name
 *   The name of a plugin.
 *
 * @return
 *   An array containing information about the plugin as returned by the ctools
 *   plugin API.
 */
function menu_token_attributes_get_plugin($name) {
  $plugins = _menu_token_attributes_plugin_info()->plugins;

  if (isset($plugins[$name])) {
    return $plugins[$name];
  }

  return FALSE;
}

/**
 * Retrieves a list of all available menu token attributes plugins.
 *
 * @return
 *   An array containing all available plugins.
 */
function menu_token_get_attributes_plugins() {
  return _menu_token_attributes_plugin_info()->plugins;
}

/**
 * Retrieves a list of all token types that are covered by the available menu
 * token attributes plugins.
 *
 * @return
 *   An array containing all token types covered by menu token attributes plugins.
 */
function menu_token_attributes_get_plugin_types() {
  return _menu_token_attributes_plugin_info()->types;
}

/**
 * Builds and returns information about the menu token attributes plugins and their types.
 */
function _menu_token_attributes_plugin_info() {
  $cache = &drupal_static(__FUNCTION__);

  if (!isset($cache)) {
    ctools_include('plugins');

    $cache = (object) array(
      'plugins' => array(),
      'types' => array(),
    );

    $info = token_get_info();

    foreach (ctools_get_plugins('menu_token_attributes', 'plugins') as $plugin) {
      if (isset($info['types'][$plugin['type']]) && $class = ctools_plugin_get_class($plugin, 'handler')) {
        $cache->plugins[$plugin['name']] = $plugin;
        $cache->plugins[$plugin['name']]['class'] = $class;
        $cache->types[$plugin['type']][$plugin['name']] = $plugin['label'];
      }
    }
  }

  return $cache;
}
